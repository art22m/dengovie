//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	//Columns
	UserID      postgres.ColumnInteger
	TgUserID    postgres.ColumnString
	PhoneNumber postgres.ColumnString
	TgAlias     postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		UserIDColumn      = postgres.IntegerColumn("user_id")
		TgUserIDColumn    = postgres.StringColumn("tg_user_id")
		PhoneNumberColumn = postgres.StringColumn("phone_number")
		TgAliasColumn     = postgres.StringColumn("tg_alias")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		allColumns        = postgres.ColumnList{UserIDColumn, TgUserIDColumn, PhoneNumberColumn, TgAliasColumn, CreatedAtColumn}
		mutableColumns    = postgres.ColumnList{TgUserIDColumn, PhoneNumberColumn, TgAliasColumn, CreatedAtColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:      UserIDColumn,
		TgUserID:    TgUserIDColumn,
		PhoneNumber: PhoneNumberColumn,
		TgAlias:     TgAliasColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
